import { prisma } from "../app.js";

// üü¢ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ–¥–∞–∂—É
export const createSale = async (pharmacistId, clientId, items) => {
  return prisma.$transaction(async (tx) => {
    let totalPrice = 0;

    for (const item of items) {
      const medication = await tx.medication.findUnique({
        where: { id: item.medicationId },
      });

      if (!medication) {
        throw new Error(`–ú–µ–¥–∏–∫–∞–º–µ–Ω—Ç –∑ id ${item.medicationId} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.`);
      }

      if (medication.requiresPrescription) {
        const prescription = await tx.prescription.findFirst({
          where: {
            clientId,
            medicationId: item.medicationId,
            validUntil: { gte: new Date() },
            allowedUses: { gt: prisma.prescription.fields.usedUses },
            deletedAt: null, // üõ°Ô∏è
          },
        });

        if (!prescription) {
          throw new Error(`–ù–µ–º–∞—î –¥—ñ–π—Å–Ω–æ–≥–æ —Ä–µ—Ü–µ–ø—Ç–∞ –¥–ª—è ${medication.name}.`);
        }

        await tx.prescription.update({
          where: { id: prescription.id },
          data: { usedUses: { increment: 1 } },
        });
      }

      if (medication.stock < item.quantity) {
        throw new Error(`–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∑–∞–ø–∞—Å—ñ–≤ –¥–ª—è ${medication.name}.`);
      }

      await tx.medication.update({
        where: { id: medication.id },
        data: { stock: { decrement: item.quantity } },
      });

      totalPrice += item.quantity * medication.price;
    }

    const sale = await tx.sale.create({
      data: {
        pharmacistId,
        clientId,
        totalPrice,
        saleItems: {
          create: items.map((item) => ({
            medicationId: item.medicationId,
            quantity: item.quantity,
            priceAtSale: item.priceAtSale,
          })),
        },
      },
      include: {
        saleItems: true,
      },
    });

    return sale;
  });
};

// üìÑ –Ü—Å—Ç–æ—Ä—ñ—è –ø—Ä–æ–¥–∞–∂—ñ–≤ (—Ç—ñ–ª—å–∫–∏ –∞–∫—Ç–∏–≤–Ω—ñ)
export const getSalesHistory = async (role, pharmacistId) => {
  const whereCondition = {
    deletedAt: null, // ‚úÖ Soft delete –ø—ñ–¥—Ç—Ä–∏–º–∫–∞
    ...(role === "PHARMACIST" ? { pharmacistId } : {}),
  };

  return prisma.sale.findMany({
    where: whereCondition,
    include: {
      client: true,
      pharmacist: {
        select: { id: true, email: true, role: true },
      },
      saleItems: {
        include: {
          medication: true,
        },
      },
    },
    orderBy: {
      saleDate: "desc",
    },
  });
};
