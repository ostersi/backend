import {
  getAllMedications,
  getMedicationById,
  createMedication,
  updateMedication,
  deleteMedication,
  getPrescriptionRequiredMedications
} from "../services/medication.service.js";

// üì¶ –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ –º–µ–¥–∏–∫–∞–º–µ–Ω—Ç–∏
export const getMedications = async (req, res) => {
  try {
    const medications = await getAllMedications();
    res.json(medications);
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
};

// üì¶ –û—Ç—Ä–∏–º–∞—Ç–∏ –º–µ–¥–∏–∫–∞–º–µ–Ω—Ç –∑–∞ ID
export const getMedication = async (req, res) => {
  try {
    const medication = await getMedicationById(req.params.id);
    if (!medication) {
      return res.status(404).json({ message: "–ú–µ–¥–∏–∫–∞–º–µ–Ω—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ" });
    }
    res.json(medication);
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
};

// ‚ûï –°—Ç–≤–æ—Ä–∏—Ç–∏ –Ω–æ–≤–∏–π –º–µ–¥–∏–∫–∞–º–µ–Ω—Ç
export const createNewMedication = async (req, res) => {
  try {
    const userId = req.user.userId;
    const newMedication = await createMedication(req.body, userId);
    res.status(201).json(newMedication);
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
};

// ‚úèÔ∏è –û–Ω–æ–≤–∏—Ç–∏ —ñ—Å–Ω—É—é—á–∏–π –º–µ–¥–∏–∫–∞–º–µ–Ω—Ç
export const updateExistingMedication = async (req, res) => {
  try {
    const userId = req.user.userId;
    const updatedMedication = await updateMedication(req.params.id, req.body, userId);
    res.json(updatedMedication);
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
};

// ‚ùå –ú º—è–∫–µ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –º–µ–¥–∏–∫–∞–º–µ–Ω—Ç—É
export const softDeleteMedication = async (req, res) => {
  try {
    const userId = req.user.userId;
    const medication = await deleteMedication(req.params.id, userId);
    res.json({ message: "–ú–µ–¥–∏–∫–∞–º–µ–Ω—Ç –ø–æ–º—ñ—á–µ–Ω–æ —è–∫ –≤–∏–¥–∞–ª–µ–Ω–∏–π.", medication });
  } catch (err) {
    console.error("–ü–æ–º–∏–ª–∫–∞ soft delete:", err);
    res.status(400).json({ message: "–ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –º–µ–¥–∏–∫–∞–º–µ–Ω—Ç." });
  }
};

// üíä –û—Ç—Ä–∏–º–∞—Ç–∏ —Ç—ñ–ª—å–∫–∏ –º–µ–¥–∏–∫–∞–º–µ–Ω—Ç–∏, —â–æ –ø–æ—Ç—Ä–µ–±—É—é—Ç—å —Ä–µ—Ü–µ–ø—Ç–∞
export const getPrescriptionRequired = async (req, res) => {
  try {
    const medications = await getPrescriptionRequiredMedications();
    res.json(medications);
  } catch (err) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –º–µ–¥–∏–∫–∞–º–µ–Ω—Ç—ñ–≤:", err);
    res.status(500).json({ message: "–ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
};
