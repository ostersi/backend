import { PrismaClient } from "@prisma/client";
import bcrypt from "bcryptjs";

const prisma = new PrismaClient();

const roles = {
  ADMIN: "ADMIN",
  PHARMACIST: "PHARMACIST",
  DOCTOR: "DOCTOR",
  USER: "USER",
};

const hash = (pw) => bcrypt.hashSync(pw, 10);

const createUserWithInfo = async (email, password, role, firstName, lastName) => {
  return prisma.user.create({
    data: {
      email,
      password: hash(password),
      role,
      userInfo: {
        create: {
          firstName,
          lastName,
          phoneNumber: "0987654321",
          address: "–≤—É–ª. –ü—Ä–∏–∫–ª–∞–¥–Ω–∞, 1",
        },
      },
    },
  });
};

const run = async () => {
  console.log("üß® –û—á–∏—Å—Ç–∫–∞ —Ç–∞–±–ª–∏—Ü—å...");
  await prisma.saleItem.deleteMany();
  await prisma.sale.deleteMany();
  await prisma.prescription.deleteMany();
  await prisma.medication.deleteMany();
  await prisma.client.deleteMany();
  await prisma.userInfo.deleteMany();
  await prisma.user.deleteMany();

  console.log("üë§ –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤...");

  // 2 –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∏
  await createUserWithInfo("admin1@example.com", "admin123", roles.ADMIN, "–û–ª–µ–≥", "–ê–¥–º—ñ–Ω");
  await createUserWithInfo("admin2@example.com", "admin123", roles.ADMIN, "–Ü—Ä–∏–Ω–∞", "–ê–¥–º—ñ–Ω");

  // 1 –∑–≤–∏—á–∞–π–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á
  await createUserWithInfo("user@example.com", "user123", roles.USER, "–ú–∞—Ä—ñ—è", "–ö–ª—ñ—î–Ω—Ç");

  // 3 –ª—ñ–∫–∞—Ä—ñ
  for (let i = 1; i <= 3; i++) {
    await createUserWithInfo(
      `doctor${i}@example.com`,
      "doctor123",
      roles.DOCTOR,
      `–õ—ñ–∫–∞—Ä${i}`,
      `–ü—Ä—ñ–∑–≤–∏—â–µ${i}`
    );
  }

  // 5 —Ñ–∞—Ä–º–∞—Ü–µ–≤—Ç—ñ–≤
  for (let i = 1; i <= 5; i++) {
    await createUserWithInfo(
      `pharma${i}@example.com`,
      "pharma123",
      roles.PHARMACIST,
      `–§–∞—Ä–º${i}`,
      `–§–∞—Ä–º–∞—Ü–µ–≤—Ç${i}`
    );
  }

  console.log("üíä –î–æ–¥–∞–≤–∞–Ω–Ω—è 30 –º–µ–¥–∏–∫–∞–º–µ–Ω—Ç—ñ–≤...");

  for (let i = 1; i <= 30; i++) {
    await prisma.medication.create({
      data: {
        name: `–ú–µ–¥–∏–∫–∞–º–µ–Ω—Ç ${i}`,
        description: `–û–ø–∏—Å –ø—Ä–µ–ø–∞—Ä–∞—Ç—É ${i}`,
        stock: 10 + i,
        price: 10 + i * 2.5,
        requiresPrescription: i % 3 === 0,
      },
    });
  }

  console.log("üë• –î–æ–¥–∞–≤–∞–Ω–Ω—è 10 –∫–ª—ñ—î–Ω—Ç—ñ–≤...");

  for (let i = 1; i <= 10; i++) {
    await prisma.client.create({
      data: {
        fullName: `–ö–ª—ñ—î–Ω—Ç ${i}`,
        contactInfo: `+38063123456${i}`,
      },
    });
  }

  console.log("‚úÖ Seed —É—Å–ø—ñ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!");
  await prisma.$disconnect();
};

run().catch((err) => {
  console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ seed:", err);
  prisma.$disconnect();
  process.exit(1);
});
